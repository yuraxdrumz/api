// Copyright (c) 2022 Cisco and/or its affiliates.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This contains the core Network Service Mesh API definitions for external
// consumption via gRPC protobufs.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.7
// source: ipam.proto

package ipam

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Type int32

const (
	Type_UNDEFINED Type = 0
	Type_ALLOCATE  Type = 1
	Type_DELETE    Type = 2
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0: "UNDEFINED",
		1: "ALLOCATE",
		2: "DELETE",
	}
	Type_value = map[string]int32{
		"UNDEFINED": 0,
		"ALLOCATE":  1,
		"DELETE":    2,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_ipam_proto_enumTypes[0].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_ipam_proto_enumTypes[0]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_ipam_proto_rawDescGZIP(), []int{0}
}

type PrefixRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            Type     `protobuf:"varint,1,opt,name=type,proto3,enum=ipam.Type" json:"type,omitempty"`
	Prefix          string   `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	ExcludePrefixes []string `protobuf:"bytes,3,rep,name=exclude_prefixes,json=excludePrefixes,proto3" json:"exclude_prefixes,omitempty"`
}

func (x *PrefixRequest) Reset() {
	*x = PrefixRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipam_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrefixRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrefixRequest) ProtoMessage() {}

func (x *PrefixRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ipam_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrefixRequest.ProtoReflect.Descriptor instead.
func (*PrefixRequest) Descriptor() ([]byte, []int) {
	return file_ipam_proto_rawDescGZIP(), []int{0}
}

func (x *PrefixRequest) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_UNDEFINED
}

func (x *PrefixRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *PrefixRequest) GetExcludePrefixes() []string {
	if x != nil {
		return x.ExcludePrefixes
	}
	return nil
}

type PrefixResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix          string   `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	ExcludePrefixes []string `protobuf:"bytes,3,rep,name=exclude_prefixes,json=excludePrefixes,proto3" json:"exclude_prefixes,omitempty"`
}

func (x *PrefixResponse) Reset() {
	*x = PrefixResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipam_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrefixResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrefixResponse) ProtoMessage() {}

func (x *PrefixResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ipam_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrefixResponse.ProtoReflect.Descriptor instead.
func (*PrefixResponse) Descriptor() ([]byte, []int) {
	return file_ipam_proto_rawDescGZIP(), []int{1}
}

func (x *PrefixResponse) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *PrefixResponse) GetExcludePrefixes() []string {
	if x != nil {
		return x.ExcludePrefixes
	}
	return nil
}

type NetworkServiceLabels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NetworkServiceLabels) Reset() {
	*x = NetworkServiceLabels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipam_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkServiceLabels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkServiceLabels) ProtoMessage() {}

func (x *NetworkServiceLabels) ProtoReflect() protoreflect.Message {
	mi := &file_ipam_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkServiceLabels.ProtoReflect.Descriptor instead.
func (*NetworkServiceLabels) Descriptor() ([]byte, []int) {
	return file_ipam_proto_rawDescGZIP(), []int{2}
}

func (x *NetworkServiceLabels) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type Endpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                    Type                             `protobuf:"varint,1,opt,name=type,proto3,enum=ipam.Type" json:"type,omitempty"`
	Name                    string                           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Prefix                  string                           `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	NetworkServiceNames     []string                         `protobuf:"bytes,4,rep,name=network_service_names,json=networkServiceNames,proto3" json:"network_service_names,omitempty"`
	NetworkServiceLabels    map[string]*NetworkServiceLabels `protobuf:"bytes,5,rep,name=network_service_labels,json=networkServiceLabels,proto3" json:"network_service_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Url                     string                           `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	ExpirationTime          *timestamppb.Timestamp           `protobuf:"bytes,7,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"`
	InitialRegistrationTime *timestamppb.Timestamp           `protobuf:"bytes,8,opt,name=initial_registration_time,json=initialRegistrationTime,proto3" json:"initial_registration_time,omitempty"`
	ExcludePrefixes         []string                         `protobuf:"bytes,9,rep,name=exclude_prefixes,json=excludePrefixes,proto3" json:"exclude_prefixes,omitempty"`
	UniqueCidr              bool                             `protobuf:"varint,10,opt,name=unique_cidr,json=uniqueCidr,proto3" json:"unique_cidr,omitempty"`
}

func (x *Endpoint) Reset() {
	*x = Endpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipam_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Endpoint) ProtoMessage() {}

func (x *Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_ipam_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Endpoint.ProtoReflect.Descriptor instead.
func (*Endpoint) Descriptor() ([]byte, []int) {
	return file_ipam_proto_rawDescGZIP(), []int{3}
}

func (x *Endpoint) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_UNDEFINED
}

func (x *Endpoint) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Endpoint) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Endpoint) GetNetworkServiceNames() []string {
	if x != nil {
		return x.NetworkServiceNames
	}
	return nil
}

func (x *Endpoint) GetNetworkServiceLabels() map[string]*NetworkServiceLabels {
	if x != nil {
		return x.NetworkServiceLabels
	}
	return nil
}

func (x *Endpoint) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Endpoint) GetExpirationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationTime
	}
	return nil
}

func (x *Endpoint) GetInitialRegistrationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.InitialRegistrationTime
	}
	return nil
}

func (x *Endpoint) GetExcludePrefixes() []string {
	if x != nil {
		return x.ExcludePrefixes
	}
	return nil
}

func (x *Endpoint) GetUniqueCidr() bool {
	if x != nil {
		return x.UniqueCidr
	}
	return false
}

type RegisterEndpointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Prefix          string                 `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	ExpirationTime  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"`
	ExcludePrefixes []string               `protobuf:"bytes,5,rep,name=exclude_prefixes,json=excludePrefixes,proto3" json:"exclude_prefixes,omitempty"`
}

func (x *RegisterEndpointResponse) Reset() {
	*x = RegisterEndpointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipam_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterEndpointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterEndpointResponse) ProtoMessage() {}

func (x *RegisterEndpointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ipam_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterEndpointResponse.ProtoReflect.Descriptor instead.
func (*RegisterEndpointResponse) Descriptor() ([]byte, []int) {
	return file_ipam_proto_rawDescGZIP(), []int{4}
}

func (x *RegisterEndpointResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegisterEndpointResponse) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *RegisterEndpointResponse) GetExpirationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationTime
	}
	return nil
}

func (x *RegisterEndpointResponse) GetExcludePrefixes() []string {
	if x != nil {
		return x.ExcludePrefixes
	}
	return nil
}

type Client struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      string                           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                    string                           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Prefix                  string                           `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	NetworkServiceNames     []string                         `protobuf:"bytes,4,rep,name=network_service_names,json=networkServiceNames,proto3" json:"network_service_names,omitempty"`
	NetworkServiceLabels    map[string]*NetworkServiceLabels `protobuf:"bytes,5,rep,name=network_service_labels,json=networkServiceLabels,proto3" json:"network_service_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Url                     string                           `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	ExpirationTime          *timestamppb.Timestamp           `protobuf:"bytes,7,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"`
	InitialRegistrationTime *timestamppb.Timestamp           `protobuf:"bytes,8,opt,name=initial_registration_time,json=initialRegistrationTime,proto3" json:"initial_registration_time,omitempty"`
	ExcludePrefixes         []string                         `protobuf:"bytes,9,rep,name=exclude_prefixes,json=excludePrefixes,proto3" json:"exclude_prefixes,omitempty"`
	SrcAddress              []string                         `protobuf:"bytes,10,rep,name=src_address,json=srcAddress,proto3" json:"src_address,omitempty"`
	DstAddress              []string                         `protobuf:"bytes,11,rep,name=dst_address,json=dstAddress,proto3" json:"dst_address,omitempty"`
}

func (x *Client) Reset() {
	*x = Client{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipam_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Client) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Client) ProtoMessage() {}

func (x *Client) ProtoReflect() protoreflect.Message {
	mi := &file_ipam_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Client.ProtoReflect.Descriptor instead.
func (*Client) Descriptor() ([]byte, []int) {
	return file_ipam_proto_rawDescGZIP(), []int{5}
}

func (x *Client) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Client) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Client) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Client) GetNetworkServiceNames() []string {
	if x != nil {
		return x.NetworkServiceNames
	}
	return nil
}

func (x *Client) GetNetworkServiceLabels() map[string]*NetworkServiceLabels {
	if x != nil {
		return x.NetworkServiceLabels
	}
	return nil
}

func (x *Client) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Client) GetExpirationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationTime
	}
	return nil
}

func (x *Client) GetInitialRegistrationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.InitialRegistrationTime
	}
	return nil
}

func (x *Client) GetExcludePrefixes() []string {
	if x != nil {
		return x.ExcludePrefixes
	}
	return nil
}

func (x *Client) GetSrcAddress() []string {
	if x != nil {
		return x.SrcAddress
	}
	return nil
}

func (x *Client) GetDstAddress() []string {
	if x != nil {
		return x.DstAddress
	}
	return nil
}

var File_ipam_proto protoreflect.FileDescriptor

var file_ipam_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x69, 0x70, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x69, 0x70,
	0x61, 0x6d, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x72, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0a, 0x2e, 0x69, 0x70, 0x61, 0x6d, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x22, 0x53, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x29,
	0x0a, 0x10, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x14, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x3e, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x70, 0x61, 0x6d, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xca, 0x04,
	0x0a, 0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x69, 0x70, 0x61, 0x6d, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x16, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x70, 0x61,
	0x6d, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x43, 0x0a, 0x0f,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x56, 0x0a, 0x19, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x17, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x63,
	0x69, 0x64, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x43, 0x69, 0x64, 0x72, 0x1a, 0x63, 0x0a, 0x19, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x70, 0x61, 0x6d, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb6, 0x01, 0x0a, 0x18, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x22, 0xd7, 0x04, 0x0a, 0x06, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x5c,
	0x0a, 0x16, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x69, 0x70, 0x61, 0x6d, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x43,
	0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x19, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x17, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x72, 0x63, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x72, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x73, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x73,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x63, 0x0a, 0x19, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x70, 0x61, 0x6d, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x2f, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x45,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x32, 0x47,
	0x0a, 0x04, 0x49, 0x50, 0x41, 0x4d, 0x12, 0x3f, 0x0a, 0x0e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x13, 0x2e, 0x69, 0x70, 0x61, 0x6d, 0x2e,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x69, 0x70, 0x61, 0x6d, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x32, 0xe2, 0x01, 0x0a, 0x06, 0x49, 0x50, 0x41, 0x4d,
	0x56, 0x32, 0x12, 0x32, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0e, 0x2e, 0x69, 0x70, 0x61, 0x6d, 0x2e, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0x0e, 0x2e, 0x69, 0x70, 0x61, 0x6d, 0x2e, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x0c, 0x2e, 0x69, 0x70, 0x61, 0x6d, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0x0c, 0x2e, 0x69, 0x70, 0x61, 0x6d, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x12, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0e, 0x2e, 0x69, 0x70, 0x61,
	0x6d, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x38, 0x0a, 0x10, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x0c, 0x2e, 0x69, 0x70, 0x61, 0x6d, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x30, 0x5a, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x70, 0x61, 0x6d, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ipam_proto_rawDescOnce sync.Once
	file_ipam_proto_rawDescData = file_ipam_proto_rawDesc
)

func file_ipam_proto_rawDescGZIP() []byte {
	file_ipam_proto_rawDescOnce.Do(func() {
		file_ipam_proto_rawDescData = protoimpl.X.CompressGZIP(file_ipam_proto_rawDescData)
	})
	return file_ipam_proto_rawDescData
}

var file_ipam_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ipam_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_ipam_proto_goTypes = []interface{}{
	(Type)(0),                        // 0: ipam.Type
	(*PrefixRequest)(nil),            // 1: ipam.PrefixRequest
	(*PrefixResponse)(nil),           // 2: ipam.PrefixResponse
	(*NetworkServiceLabels)(nil),     // 3: ipam.NetworkServiceLabels
	(*Endpoint)(nil),                 // 4: ipam.Endpoint
	(*RegisterEndpointResponse)(nil), // 5: ipam.RegisterEndpointResponse
	(*Client)(nil),                   // 6: ipam.Client
	nil,                              // 7: ipam.NetworkServiceLabels.LabelsEntry
	nil,                              // 8: ipam.Endpoint.NetworkServiceLabelsEntry
	nil,                              // 9: ipam.Client.NetworkServiceLabelsEntry
	(*timestamppb.Timestamp)(nil),    // 10: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),            // 11: google.protobuf.Empty
}
var file_ipam_proto_depIdxs = []int32{
	0,  // 0: ipam.PrefixRequest.type:type_name -> ipam.Type
	7,  // 1: ipam.NetworkServiceLabels.labels:type_name -> ipam.NetworkServiceLabels.LabelsEntry
	0,  // 2: ipam.Endpoint.type:type_name -> ipam.Type
	8,  // 3: ipam.Endpoint.network_service_labels:type_name -> ipam.Endpoint.NetworkServiceLabelsEntry
	10, // 4: ipam.Endpoint.expiration_time:type_name -> google.protobuf.Timestamp
	10, // 5: ipam.Endpoint.initial_registration_time:type_name -> google.protobuf.Timestamp
	10, // 6: ipam.RegisterEndpointResponse.expiration_time:type_name -> google.protobuf.Timestamp
	9,  // 7: ipam.Client.network_service_labels:type_name -> ipam.Client.NetworkServiceLabelsEntry
	10, // 8: ipam.Client.expiration_time:type_name -> google.protobuf.Timestamp
	10, // 9: ipam.Client.initial_registration_time:type_name -> google.protobuf.Timestamp
	3,  // 10: ipam.Endpoint.NetworkServiceLabelsEntry.value:type_name -> ipam.NetworkServiceLabels
	3,  // 11: ipam.Client.NetworkServiceLabelsEntry.value:type_name -> ipam.NetworkServiceLabels
	1,  // 12: ipam.IPAM.ManagePrefixes:input_type -> ipam.PrefixRequest
	4,  // 13: ipam.IPAMV2.RegisterEndpoint:input_type -> ipam.Endpoint
	6,  // 14: ipam.IPAMV2.RegisterClient:input_type -> ipam.Client
	4,  // 15: ipam.IPAMV2.UnregisterEndpoint:input_type -> ipam.Endpoint
	6,  // 16: ipam.IPAMV2.UnregisterClient:input_type -> ipam.Client
	2,  // 17: ipam.IPAM.ManagePrefixes:output_type -> ipam.PrefixResponse
	4,  // 18: ipam.IPAMV2.RegisterEndpoint:output_type -> ipam.Endpoint
	6,  // 19: ipam.IPAMV2.RegisterClient:output_type -> ipam.Client
	11, // 20: ipam.IPAMV2.UnregisterEndpoint:output_type -> google.protobuf.Empty
	11, // 21: ipam.IPAMV2.UnregisterClient:output_type -> google.protobuf.Empty
	17, // [17:22] is the sub-list for method output_type
	12, // [12:17] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_ipam_proto_init() }
func file_ipam_proto_init() {
	if File_ipam_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ipam_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrefixRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipam_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrefixResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipam_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkServiceLabels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipam_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Endpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipam_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterEndpointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipam_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Client); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ipam_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_ipam_proto_goTypes,
		DependencyIndexes: file_ipam_proto_depIdxs,
		EnumInfos:         file_ipam_proto_enumTypes,
		MessageInfos:      file_ipam_proto_msgTypes,
	}.Build()
	File_ipam_proto = out.File
	file_ipam_proto_rawDesc = nil
	file_ipam_proto_goTypes = nil
	file_ipam_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IPAMClient is the client API for IPAM service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IPAMClient interface {
	ManagePrefixes(ctx context.Context, opts ...grpc.CallOption) (IPAM_ManagePrefixesClient, error)
}

type iPAMClient struct {
	cc grpc.ClientConnInterface
}

func NewIPAMClient(cc grpc.ClientConnInterface) IPAMClient {
	return &iPAMClient{cc}
}

func (c *iPAMClient) ManagePrefixes(ctx context.Context, opts ...grpc.CallOption) (IPAM_ManagePrefixesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_IPAM_serviceDesc.Streams[0], "/ipam.IPAM/ManagePrefixes", opts...)
	if err != nil {
		return nil, err
	}
	x := &iPAMManagePrefixesClient{stream}
	return x, nil
}

type IPAM_ManagePrefixesClient interface {
	Send(*PrefixRequest) error
	Recv() (*PrefixResponse, error)
	grpc.ClientStream
}

type iPAMManagePrefixesClient struct {
	grpc.ClientStream
}

func (x *iPAMManagePrefixesClient) Send(m *PrefixRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *iPAMManagePrefixesClient) Recv() (*PrefixResponse, error) {
	m := new(PrefixResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IPAMServer is the server API for IPAM service.
type IPAMServer interface {
	ManagePrefixes(IPAM_ManagePrefixesServer) error
}

// UnimplementedIPAMServer can be embedded to have forward compatible implementations.
type UnimplementedIPAMServer struct {
}

func (*UnimplementedIPAMServer) ManagePrefixes(IPAM_ManagePrefixesServer) error {
	return status.Errorf(codes.Unimplemented, "method ManagePrefixes not implemented")
}

func RegisterIPAMServer(s *grpc.Server, srv IPAMServer) {
	s.RegisterService(&_IPAM_serviceDesc, srv)
}

func _IPAM_ManagePrefixes_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IPAMServer).ManagePrefixes(&iPAMManagePrefixesServer{stream})
}

type IPAM_ManagePrefixesServer interface {
	Send(*PrefixResponse) error
	Recv() (*PrefixRequest, error)
	grpc.ServerStream
}

type iPAMManagePrefixesServer struct {
	grpc.ServerStream
}

func (x *iPAMManagePrefixesServer) Send(m *PrefixResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *iPAMManagePrefixesServer) Recv() (*PrefixRequest, error) {
	m := new(PrefixRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _IPAM_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ipam.IPAM",
	HandlerType: (*IPAMServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ManagePrefixes",
			Handler:       _IPAM_ManagePrefixes_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ipam.proto",
}

// IPAMV2Client is the client API for IPAMV2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IPAMV2Client interface {
	RegisterEndpoint(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*Endpoint, error)
	RegisterClient(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Client, error)
	UnregisterEndpoint(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnregisterClient(ctx context.Context, in *Client, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type iPAMV2Client struct {
	cc grpc.ClientConnInterface
}

func NewIPAMV2Client(cc grpc.ClientConnInterface) IPAMV2Client {
	return &iPAMV2Client{cc}
}

func (c *iPAMV2Client) RegisterEndpoint(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*Endpoint, error) {
	out := new(Endpoint)
	err := c.cc.Invoke(ctx, "/ipam.IPAMV2/RegisterEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPAMV2Client) RegisterClient(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Client, error) {
	out := new(Client)
	err := c.cc.Invoke(ctx, "/ipam.IPAMV2/RegisterClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPAMV2Client) UnregisterEndpoint(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ipam.IPAMV2/UnregisterEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPAMV2Client) UnregisterClient(ctx context.Context, in *Client, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ipam.IPAMV2/UnregisterClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IPAMV2Server is the server API for IPAMV2 service.
type IPAMV2Server interface {
	RegisterEndpoint(context.Context, *Endpoint) (*Endpoint, error)
	RegisterClient(context.Context, *Client) (*Client, error)
	UnregisterEndpoint(context.Context, *Endpoint) (*emptypb.Empty, error)
	UnregisterClient(context.Context, *Client) (*emptypb.Empty, error)
}

// UnimplementedIPAMV2Server can be embedded to have forward compatible implementations.
type UnimplementedIPAMV2Server struct {
}

func (*UnimplementedIPAMV2Server) RegisterEndpoint(context.Context, *Endpoint) (*Endpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterEndpoint not implemented")
}
func (*UnimplementedIPAMV2Server) RegisterClient(context.Context, *Client) (*Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterClient not implemented")
}
func (*UnimplementedIPAMV2Server) UnregisterEndpoint(context.Context, *Endpoint) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterEndpoint not implemented")
}
func (*UnimplementedIPAMV2Server) UnregisterClient(context.Context, *Client) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterClient not implemented")
}

func RegisterIPAMV2Server(s *grpc.Server, srv IPAMV2Server) {
	s.RegisterService(&_IPAMV2_serviceDesc, srv)
}

func _IPAMV2_RegisterEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Endpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPAMV2Server).RegisterEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipam.IPAMV2/RegisterEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPAMV2Server).RegisterEndpoint(ctx, req.(*Endpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPAMV2_RegisterClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPAMV2Server).RegisterClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipam.IPAMV2/RegisterClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPAMV2Server).RegisterClient(ctx, req.(*Client))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPAMV2_UnregisterEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Endpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPAMV2Server).UnregisterEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipam.IPAMV2/UnregisterEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPAMV2Server).UnregisterEndpoint(ctx, req.(*Endpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPAMV2_UnregisterClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPAMV2Server).UnregisterClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipam.IPAMV2/UnregisterClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPAMV2Server).UnregisterClient(ctx, req.(*Client))
	}
	return interceptor(ctx, in, info, handler)
}

var _IPAMV2_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ipam.IPAMV2",
	HandlerType: (*IPAMV2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterEndpoint",
			Handler:    _IPAMV2_RegisterEndpoint_Handler,
		},
		{
			MethodName: "RegisterClient",
			Handler:    _IPAMV2_RegisterClient_Handler,
		},
		{
			MethodName: "UnregisterEndpoint",
			Handler:    _IPAMV2_UnregisterEndpoint_Handler,
		},
		{
			MethodName: "UnregisterClient",
			Handler:    _IPAMV2_UnregisterClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipam.proto",
}
