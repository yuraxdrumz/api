// Copyright (c) 2022 Cisco and/or its affiliates.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This contains the core Network Service Mesh API definitions for external
// consumption via gRPC protobufs.

syntax = "proto3";

package ipam;
option go_package = "github.com/networkservicemesh/api/pkg/api/ipam";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";


enum Type {
  UNDEFINED = 0;
  ALLOCATE = 1;
  DELETE = 2;
}

message PrefixRequest {
  Type type = 1;
  string prefix = 2;
  repeated string exclude_prefixes = 3;
}

message PrefixResponse {
  string prefix = 2;
  repeated string exclude_prefixes = 3;
}

service IPAM  {
  rpc ManagePrefixes (stream PrefixRequest) returns (stream PrefixResponse);
}

message NetworkServiceLabels {
    map<string, string> labels = 1;
}

message Endpoint {
    Type type = 1;
    string name = 2;
    string prefix = 3;
    repeated string network_service_names = 4;
    map<string, NetworkServiceLabels> network_service_labels = 5;
    string url = 6;
    google.protobuf.Timestamp expiration_time = 7;
    google.protobuf.Timestamp initial_registration_time = 8;
    repeated string exclude_prefixes = 9;
    bool unique_cidr = 10;
}

message RegisterEndpointResponse {
  string name = 2;
  string prefix = 3;
  google.protobuf.Timestamp expiration_time = 4;
  repeated string exclude_prefixes = 5;
}

message Client {
  string id = 1;
  string name = 2;
  string prefix = 3;
  repeated string network_service_names = 4;
  map<string, NetworkServiceLabels> network_service_labels = 5;
  string url = 6;
  google.protobuf.Timestamp expiration_time = 7;
  google.protobuf.Timestamp initial_registration_time = 8;
  repeated string exclude_prefixes = 9;
  repeated string src_address = 10;
  repeated string dst_address = 11;
  string endpoint_name = 12;
}

// Endpoint -> RegisterEndpoint -> IPAM -> return CIDR
// Client -> Endpoint -> RegisterClient -> IPAM -> return IP from CIDR
// Client -> Endpoint -> RegisterClient -> IPAM -> IP exists, expiration is valid, update expiration
// Client -> Endpoint -> RegisterClient -> IPAM -> IP exists, expiration passed, call .Close()?
// CLient -> Endpoint -> UnregisterClient -> IPAM -> release IP from CIDR
// Endpoint -> UnregisterEndpoint -> release CIDR
service IPAMV2 {
  rpc RegisterEndpoint (Endpoint) returns (Endpoint);
  rpc RegisterClient (Client) returns (Client);
  rpc UnregisterEndpoint (Endpoint) returns (google.protobuf.Empty);
  rpc UnregisterClient (Client) returns (google.protobuf.Empty);
}